{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\David\\\\Documents\\\\PROJECT BELCAVE\\\\Mini_Projects\\\\studio_calendar\\\\frontend\\\\session-calendar\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\David\\\\Documents\\\\PROJECT BELCAVE\\\\Mini_Projects\\\\studio_calendar\\\\frontend\\\\session-calendar\\\\src\\\\Main.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport \"./App.css\";\nimport { getMonth } from \"./util\";\n//import { getTheme, getThemeClass } from \"./util\";\nimport CalendarHeader from \"./components/CalendarHeader\";\nimport Sidebar from \"./components/Sidebar\";\nimport Month from \"./components/Month\";\nimport GlobalContext from \"./context/GlobalContext\";\nimport ContextWrapper from \"./context/ContextWrapper\";\nimport App from \"./App\";\nimport EventModal from \"./components/EventModal\";\nimport './themes.css';\nimport { getAllEvents, getAllEvents2 } from \"./services/EventService\";\nimport dayjs from \"dayjs\";\nimport axios from 'axios';\nfunction DataLoaded(props) {\n  //const { showEventModal, dataLoaded, setDataLoaded, eventList, getEvents } = useContext(GlobalContext);\n  var _useContext = useContext(GlobalContext),\n    showEventModal = _useContext.showEventModal;\n  var dataLoaded = props.isDataLoaded;\n  var eventList = props.eventList;\n  console.log(\"[MAIN] PENDING DATA UPDATE \" + props.isDataLoaded);\n  if (props.isDataLoaded) {\n    console.log(\"[MAIN] DATA LOADED I THINK\" + eventList);\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }\n    }, showEventModal && /*#__PURE__*/React.createElement(EventModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 28\n      }\n    }), /*#__PURE__*/React.createElement(ContextWrapper, {\n      eventList: props.eventList,\n      isDataLoaded: props.isDataLoaded,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(App, {\n      eventList: props.eventList,\n      isDataLoaded: props.isDataLoaded,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }\n    })));\n  }\n  console.log(\"[MAIN] DATA NOT LOOKIN GOOD BREV\" + eventList);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, showEventModal && /*#__PURE__*/React.createElement(EventModal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 26\n    }\n  }), /*#__PURE__*/React.createElement(ContextWrapper, {\n    eventList: eventList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }));\n}\nfunction Main(props) {\n  //const [currenMonth, setCurrentMonth] = useState(getMonth());\n  //const { monthIndex, showEventModal, dataLoaded, setDataLoaded, eventList, getEvents } = useContext(GlobalContext);\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    eventList = _useState2[0],\n    getEvents = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    dataLoaded = _useState4[0],\n    setDataLoaded = _useState4[1]; //const themeColor = getTheme();\n  //const themeClass = getThemeClass();\n  console.log(\"[MAIN] EVENTS FINISHED LOADING \" + dayjs() + \" \" + dataLoaded);\n  useEffect(function () {\n    console.log(\"[MAIN] DATA LOADED IN MAIN.EFFECT: \" + dataLoaded);\n  }, [dataLoaded]);\n  useEffect(function () {\n    console.log(\"[MAIN] MAIN.EFFECT EVENTLIST: \" + dataLoaded);\n    getAllEvents().then(function (response) {\n      var allEvents = response;\n      //localStorage.setItem(\"savedEvents\", JSON.stringify(allEvents));\n      getEvents(allEvents);\n      setDataLoaded(true);\n    });\n    console.log(\"[MAIN] EVENTLIST.EFFECT DEBUG: \" + dataLoaded + \" \" + eventList);\n  }, []);\n  return /*#__PURE__*/React.createElement(DataLoaded, {\n    isDataLoaded: dataLoaded,\n    eventList: eventList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  });\n}\nexport default Main;","map":{"version":3,"names":["React","useState","useContext","useEffect","getMonth","CalendarHeader","Sidebar","Month","GlobalContext","ContextWrapper","App","EventModal","getAllEvents","getAllEvents2","dayjs","axios","DataLoaded","props","showEventModal","dataLoaded","isDataLoaded","eventList","console","log","Main","getEvents","setDataLoaded","then","response","allEvents"],"sources":["C:/Users/David/Documents/PROJECT BELCAVE/Mini_Projects/studio_calendar/frontend/session-calendar/src/Main.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { getMonth } from \"./util\";\r\n//import { getTheme, getThemeClass } from \"./util\";\r\nimport CalendarHeader from \"./components/CalendarHeader\";\r\nimport Sidebar from \"./components/Sidebar\";\r\nimport Month from \"./components/Month\";\r\nimport GlobalContext from \"./context/GlobalContext\";\r\nimport ContextWrapper from \"./context/ContextWrapper\";\r\nimport App from \"./App\";\r\nimport EventModal from \"./components/EventModal\";\r\nimport './themes.css';\r\nimport { getAllEvents, getAllEvents2 } from \"./services/EventService\";\r\nimport dayjs from \"dayjs\";\r\nimport axios from 'axios';\r\n\r\nfunction DataLoaded(props) {\r\n  //const { showEventModal, dataLoaded, setDataLoaded, eventList, getEvents } = useContext(GlobalContext);\r\n  const { showEventModal } = useContext(GlobalContext);\r\n  const dataLoaded = props.isDataLoaded;\r\n  const eventList = props.eventList;\r\n  console.log(\"[MAIN] PENDING DATA UPDATE \" + props.isDataLoaded);\r\n  if (props.isDataLoaded) {\r\n    console.log(\"[MAIN] DATA LOADED I THINK\" + eventList);\r\n    return (\r\n      <React.Fragment>\r\n        {showEventModal && <EventModal />}\r\n        <ContextWrapper eventList={props.eventList} isDataLoaded={props.isDataLoaded}>\r\n          <App eventList={props.eventList} isDataLoaded={props.isDataLoaded} />\r\n        </ContextWrapper>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  console.log(\"[MAIN] DATA NOT LOOKIN GOOD BREV\" + eventList);\r\n  return (\r\n    <React.Fragment>\r\n      {showEventModal && <EventModal />}\r\n      <ContextWrapper eventList={eventList}>\r\n      </ContextWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nfunction Main(props) {\r\n  //const [currenMonth, setCurrentMonth] = useState(getMonth());\r\n  //const { monthIndex, showEventModal, dataLoaded, setDataLoaded, eventList, getEvents } = useContext(GlobalContext);\r\n  const [eventList, getEvents] = useState([]);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  //const themeColor = getTheme();\r\n  //const themeClass = getThemeClass();\r\n\r\n  console.log(\"[MAIN] EVENTS FINISHED LOADING \" + dayjs() + \" \" + dataLoaded);\r\n\r\n  useEffect(() => {\r\n    console.log(\"[MAIN] DATA LOADED IN MAIN.EFFECT: \" + dataLoaded);\r\n  }, [dataLoaded]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"[MAIN] MAIN.EFFECT EVENTLIST: \" + dataLoaded);\r\n    getAllEvents().then((response) => {\r\n      const allEvents = response\r\n      //localStorage.setItem(\"savedEvents\", JSON.stringify(allEvents));\r\n      getEvents(allEvents);\r\n      setDataLoaded(true);\r\n    });\r\n    console.log(\"[MAIN] EVENTLIST.EFFECT DEBUG: \" + dataLoaded + \" \" + eventList);\r\n\r\n  }, []);\r\n\r\n\r\n\r\n  return (\r\n    <DataLoaded isDataLoaded={dataLoaded} eventList={eventList} />\r\n  );\r\n}\r\n\r\nexport default Main;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}