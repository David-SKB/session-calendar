{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\David\\\\Documents\\\\PROJECT BELCAVE\\\\Mini_Projects\\\\studio_calendar\\\\frontend\\\\session-calendar\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\David\\\\Documents\\\\PROJECT BELCAVE\\\\Mini_Projects\\\\studio_calendar\\\\frontend\\\\session-calendar\\\\src\\\\Main.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport \"./App.css\";\n//import { getTheme, getThemeClass } from \"./util\";\nimport GlobalContext from \"./context/GlobalContext\";\nimport ContextWrapper from \"./context/ContextWrapper\";\nimport App from \"./App\";\nimport EventModal from \"./components/EventModal\";\nimport './themes.css';\nimport { getAllEvents, createEvent } from \"./services/EventService\";\nimport dayjs from \"dayjs\";\nfunction DataLoaded(props) {\n  var _useContext = useContext(GlobalContext),\n    showEventModal = _useContext.showEventModal,\n    setShowEventModal = _useContext.setShowEventModal,\n    dispatchCalEvent = _useContext.dispatchCalEvent,\n    selectedEvent = _useContext.selectedEvent;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    dataSubmitted = _useState2[0],\n    setDataSubmitted = _useState2[1];\n  console.log(\"[MAIN] LOADING DATA... \" + props.eventList);\n  function handleSubmit(e, calendarEvent) {\n    e.preventDefault();\n    //const eventID = new Date(replaceRange((startDate ? startDate : daySelected.toDate().toISOString()), 11, 16, eventStartTime.valueOf())).valueOf();\n    //console.log(\"HANDLESUBMIT: \" + eventID);\n    //console.log(\"SELECTEDEVENT: \" + selectedEvent);\n    console.log(\"[EM] CHECKING END DATE: \" + calendarEvent.startDate);\n    console.log(\"[EM] CHECKING END DATE: \" + calendarEvent.endDate);\n    calendarEvent.endDate == \"\" ? console.log(\"[EM] EMPTY END DATE: \" + calendarEvent.endDate) : console.log(\"[EM] NOT EMPTY END DATE: \" + calendarEvent.endDate);\n    /*const calendarEvent2 = {\r\n      id: selectedEvent ? selectedEvent.id : null,\r\n      event_title,\r\n      event_description,\r\n      start_date: startDate ? startDate : daySelected,\r\n      end_date: endDate == \"\" ? startDate : endDate,\r\n      start_time: eventStartTime,\r\n      end_time: eventEndTime,\r\n      is_full_day_event: false,\r\n      is_reccuring: false,\r\n      created_by: \"frontend-dev\",\r\n      created_date: dayjs(),\r\n      parent_event_id: null,\r\n      event_label: selectedLabel,\r\n    };*/\n    if (selectedEvent) {\n      dispatchCalEvent({\n        type: \"update\",\n        payload: calendarEvent\n      });\n    } else {\n      //console.log(\"[EM] CALENDAR EVENT: \" + JSON.parse(calendarEvent));\n      //console.log(\"[EM] CALENDAR EVENT2: \" + calendarEvent);\n      console.log(\"[EM] CALENDAR EVENT3: \" + JSON.stringify(calendarEvent));\n      //const parsedEvent = JSON.stringify(calendarEvent);\n      createEvent(calendarEvent).then(function (response) {\n        console.log(\"[EM] POSTING EVENT SUCCESS: \" + response);\n        setDataSubmitted(true);\n        //props.setReloadData(!props.reloadData);\n      });\n    }\n\n    setShowEventModal(false);\n  }\n  if (props.isDataLoaded) {\n    console.log(\"[MAIN] DATA LOADED: \" + props.eventList);\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, showEventModal && /*#__PURE__*/React.createElement(EventModal, {\n      reloadData: props.reloadData,\n      setReloadData: props.setReloadData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 28\n      }\n    }), /*#__PURE__*/React.createElement(ContextWrapper, {\n      eventList: props.eventList,\n      isDataLoaded: props.isDataLoaded,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(App, {\n      eventList: props.eventList,\n      isDataLoaded: props.isDataLoaded,\n      handleSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    })));\n  }\n  console.log(\"[MAIN] DATA NOT LOADED YET\" + props.eventList);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, showEventModal && /*#__PURE__*/React.createElement(EventModal, {\n    reloadData: props.reloadData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 26\n    }\n  }), /*#__PURE__*/React.createElement(ContextWrapper, {\n    eventList: props.eventList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }));\n}\nfunction Main(props) {\n  //const [currenMonth, setCurrentMonth] = useState(getMonth());\n  var _useContext2 = useContext(GlobalContext),\n    loadData = _useContext2.loadData;\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    eventList = _useState4[0],\n    getEvents = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    dataLoaded = _useState6[0],\n    setDataLoaded = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    reloadData = _useState8[0],\n    setReloadData = _useState8[1]; //const themeColor = getTheme();\n  //const themeClass = getThemeClass();\n  console.log(\"[MAIN] INIT MAIN: \" + dayjs() + \" \" + dataLoaded);\n  useEffect(function () {\n    if (dataLoaded) {\n      console.log(\"[MAIN] DATA LOADED IN MAIN.EFFECT: \" + dataLoaded);\n    }\n  }, [dataLoaded]);\n  useEffect(function () {\n    console.log(\"[MAIN] MAIN.EFFECT LOADING EVENTS: \" + dataLoaded);\n    getAllEvents().then(function (response) {\n      var allEvents = response;\n      //localStorage.setItem(\"savedEvents\", JSON.stringify(allEvents));\n      getEvents(allEvents);\n      setDataLoaded(true);\n    });\n  }, [reloadData]);\n  return /*#__PURE__*/React.createElement(DataLoaded, {\n    isDataLoaded: dataLoaded,\n    eventList: eventList,\n    setReloadData: setReloadData,\n    reloadData: reloadData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  });\n}\nexport default Main;","map":{"version":3,"names":["React","useState","useContext","useEffect","GlobalContext","ContextWrapper","App","EventModal","getAllEvents","createEvent","dayjs","DataLoaded","props","showEventModal","setShowEventModal","dispatchCalEvent","selectedEvent","dataSubmitted","setDataSubmitted","console","log","eventList","handleSubmit","e","calendarEvent","preventDefault","startDate","endDate","type","payload","JSON","stringify","then","response","isDataLoaded","reloadData","setReloadData","Main","loadData","getEvents","dataLoaded","setDataLoaded","allEvents"],"sources":["C:/Users/David/Documents/PROJECT BELCAVE/Mini_Projects/studio_calendar/frontend/session-calendar/src/Main.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\nimport \"./App.css\";\r\n//import { getTheme, getThemeClass } from \"./util\";\r\nimport GlobalContext from \"./context/GlobalContext\";\r\nimport ContextWrapper from \"./context/ContextWrapper\";\r\nimport App from \"./App\";\r\nimport EventModal from \"./components/EventModal\";\r\nimport './themes.css';\r\nimport { getAllEvents, createEvent } from \"./services/EventService\";\r\nimport dayjs from \"dayjs\";\r\n\r\nfunction DataLoaded(props) {\r\n  const { \r\n    showEventModal, \r\n    setShowEventModal,\r\n    dispatchCalEvent,\r\n    selectedEvent,\r\n  } = useContext(GlobalContext);\r\n  const [dataSubmitted, setDataSubmitted] = useState(false);\r\n  console.log(\"[MAIN] LOADING DATA... \" + props.eventList);\r\n\r\n  function handleSubmit(e, calendarEvent) {\r\n    e.preventDefault();\r\n    //const eventID = new Date(replaceRange((startDate ? startDate : daySelected.toDate().toISOString()), 11, 16, eventStartTime.valueOf())).valueOf();\r\n    //console.log(\"HANDLESUBMIT: \" + eventID);\r\n    //console.log(\"SELECTEDEVENT: \" + selectedEvent);\r\n    console.log(\"[EM] CHECKING END DATE: \" + calendarEvent.startDate);\r\n    console.log(\"[EM] CHECKING END DATE: \" + calendarEvent.endDate);\r\n    calendarEvent.endDate == \"\" ? console.log(\"[EM] EMPTY END DATE: \" + calendarEvent.endDate) : console.log(\"[EM] NOT EMPTY END DATE: \" + calendarEvent.endDate);\r\n    /*const calendarEvent2 = {\r\n      id: selectedEvent ? selectedEvent.id : null,\r\n      event_title,\r\n      event_description,\r\n      start_date: startDate ? startDate : daySelected,\r\n      end_date: endDate == \"\" ? startDate : endDate,\r\n      start_time: eventStartTime,\r\n      end_time: eventEndTime,\r\n      is_full_day_event: false,\r\n      is_reccuring: false,\r\n      created_by: \"frontend-dev\",\r\n      created_date: dayjs(),\r\n      parent_event_id: null,\r\n      event_label: selectedLabel,\r\n    };*/\r\n    if (selectedEvent) {\r\n      dispatchCalEvent({ type: \"update\", payload: calendarEvent });\r\n    } else {\r\n      //console.log(\"[EM] CALENDAR EVENT: \" + JSON.parse(calendarEvent));\r\n      //console.log(\"[EM] CALENDAR EVENT2: \" + calendarEvent);\r\n      console.log(\"[EM] CALENDAR EVENT3: \" + JSON.stringify(calendarEvent));\r\n      //const parsedEvent = JSON.stringify(calendarEvent);\r\n      createEvent(calendarEvent).then((response) => {\r\n        console.log(\"[EM] POSTING EVENT SUCCESS: \" + response);\r\n        setDataSubmitted(true);\r\n        //props.setReloadData(!props.reloadData);\r\n      });\r\n      \r\n    }\r\n    setShowEventModal(false);\r\n  }\r\n\r\n  if (props.isDataLoaded) {\r\n    console.log(\"[MAIN] DATA LOADED: \" + props.eventList);\r\n    return (\r\n      <React.Fragment>\r\n        {showEventModal && <EventModal reloadData={props.reloadData} setReloadData={props.setReloadData}/>}\r\n        <ContextWrapper eventList={props.eventList} isDataLoaded={props.isDataLoaded}>\r\n          <App eventList={props.eventList} isDataLoaded={props.isDataLoaded} handleSubmit={handleSubmit}/>\r\n        </ContextWrapper>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  console.log(\"[MAIN] DATA NOT LOADED YET\" + props.eventList);\r\n  return (\r\n    <React.Fragment>\r\n      {showEventModal && <EventModal reloadData={props.reloadData} />}\r\n      <ContextWrapper eventList={props.eventList}>\r\n      </ContextWrapper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nfunction Main(props) {\r\n  //const [currenMonth, setCurrentMonth] = useState(getMonth());\r\n  const { loadData } = useContext(GlobalContext);\r\n  const [eventList, getEvents] = useState([]);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [reloadData, setReloadData] = useState(false);\r\n\r\n  //const themeColor = getTheme();\r\n  //const themeClass = getThemeClass();\r\n\r\n  console.log(\"[MAIN] INIT MAIN: \" + dayjs() + \" \" + dataLoaded);\r\n\r\n  useEffect(() => {\r\n    if (dataLoaded) {\r\n      console.log(\"[MAIN] DATA LOADED IN MAIN.EFFECT: \" + dataLoaded);\r\n    }\r\n  }, [dataLoaded]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"[MAIN] MAIN.EFFECT LOADING EVENTS: \" + dataLoaded);\r\n    getAllEvents().then((response) => {\r\n      const allEvents = response\r\n      //localStorage.setItem(\"savedEvents\", JSON.stringify(allEvents));\r\n      getEvents(allEvents);\r\n      setDataLoaded(true);\r\n    });\r\n  }, [reloadData]);\r\n\r\n  return (\r\n    <DataLoaded isDataLoaded={dataLoaded} eventList={eventList} setReloadData={setReloadData} reloadData={reloadData}/>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}